//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SubsidiariesEntities1 : DbContext
    {
        public SubsidiariesEntities1()
            : base("name=SubsidiariesEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Association> Associations { get; set; }
        public virtual DbSet<AssociationType> AssociationTypes { get; set; }
        public virtual DbSet<CompanyName> CompanyNames { get; set; }
        public virtual DbSet<CompanyType> CompanyTypes { get; set; }
        public virtual DbSet<Exchange> Exchanges { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Registration_dbo> Registration_dbo { get; set; }
    
        public virtual int InsertCompanyName(string companyName, string shortCode, string corpInfo, string countryID, string exchangeCode, Nullable<int> companyTypeID, string businessSectorID, Nullable<System.DateTime> updateDate)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var corpInfoParameter = corpInfo != null ?
                new ObjectParameter("CorpInfo", corpInfo) :
                new ObjectParameter("CorpInfo", typeof(string));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var exchangeCodeParameter = exchangeCode != null ?
                new ObjectParameter("ExchangeCode", exchangeCode) :
                new ObjectParameter("ExchangeCode", typeof(string));
    
            var companyTypeIDParameter = companyTypeID.HasValue ?
                new ObjectParameter("CompanyTypeID", companyTypeID) :
                new ObjectParameter("CompanyTypeID", typeof(int));
    
            var businessSectorIDParameter = businessSectorID != null ?
                new ObjectParameter("BusinessSectorID", businessSectorID) :
                new ObjectParameter("BusinessSectorID", typeof(string));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCompanyName", companyNameParameter, shortCodeParameter, corpInfoParameter, countryIDParameter, exchangeCodeParameter, companyTypeIDParameter, businessSectorIDParameter, updateDateParameter);
        }
    
        public virtual int InsertCompanyType(string companyTypeID, string companyTypeDesc)
        {
            var companyTypeIDParameter = companyTypeID != null ?
                new ObjectParameter("CompanyTypeID", companyTypeID) :
                new ObjectParameter("CompanyTypeID", typeof(string));
    
            var companyTypeDescParameter = companyTypeDesc != null ?
                new ObjectParameter("CompanyTypeDesc", companyTypeDesc) :
                new ObjectParameter("CompanyTypeDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCompanyType", companyTypeIDParameter, companyTypeDescParameter);
        }
    
        public virtual int InsertExchange(string exchangeCodeID, string exchangeName, string countryID)
        {
            var exchangeCodeIDParameter = exchangeCodeID != null ?
                new ObjectParameter("ExchangeCodeID", exchangeCodeID) :
                new ObjectParameter("ExchangeCodeID", typeof(string));
    
            var exchangeNameParameter = exchangeName != null ?
                new ObjectParameter("ExchangeName", exchangeName) :
                new ObjectParameter("ExchangeName", typeof(string));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertExchange", exchangeCodeIDParameter, exchangeNameParameter, countryIDParameter);
        }
    
        public virtual ObjectResult<SearchCompany_Result> SearchCompany(string companyName)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCompany_Result>("SearchCompany", companyNameParameter);
        }
    
        public virtual ObjectResult<selectAllCompanyName_Result> selectAllCompanyName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectAllCompanyName_Result>("selectAllCompanyName");
        }
    
        public virtual ObjectResult<SelectAllCompanyType_Result> SelectAllCompanyType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllCompanyType_Result>("SelectAllCompanyType");
        }
    
        public virtual ObjectResult<SelectAllExchange_Result> SelectAllExchange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllExchange_Result>("SelectAllExchange");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateCompanyName(string companyName, string shortCode, string corpInfo, string countryID, string exchangeCodeID, Nullable<int> companyTypeID, string businessSectorID)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var shortCodeParameter = shortCode != null ?
                new ObjectParameter("ShortCode", shortCode) :
                new ObjectParameter("ShortCode", typeof(string));
    
            var corpInfoParameter = corpInfo != null ?
                new ObjectParameter("CorpInfo", corpInfo) :
                new ObjectParameter("CorpInfo", typeof(string));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var exchangeCodeIDParameter = exchangeCodeID != null ?
                new ObjectParameter("ExchangeCodeID", exchangeCodeID) :
                new ObjectParameter("ExchangeCodeID", typeof(string));
    
            var companyTypeIDParameter = companyTypeID.HasValue ?
                new ObjectParameter("CompanyTypeID", companyTypeID) :
                new ObjectParameter("CompanyTypeID", typeof(int));
    
            var businessSectorIDParameter = businessSectorID != null ?
                new ObjectParameter("BusinessSectorID", businessSectorID) :
                new ObjectParameter("BusinessSectorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCompanyName", companyNameParameter, shortCodeParameter, corpInfoParameter, countryIDParameter, exchangeCodeIDParameter, companyTypeIDParameter, businessSectorIDParameter);
        }
    }
}
